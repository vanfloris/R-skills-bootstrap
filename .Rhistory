####### Initialise the variables #######
# We look to simulate a VAR(2) with k = 4 equations
rm(list=ls())
set.seed(123) # Reset random number generator for reasons of reproducability
library(urca)
library(vars)
library(matlib)
# Generate sample
t <- 50 # Number of time series observations
n <- t + 2
k <- 4 # Number of endogenous variables
p <- 2 # Number of lags
# Generate coefficient matrices
a <- -0.4 ; gamma <- 0.8 ; alpha <- t(t(c(a,0,0,0))); beta <- t(t(c(1,0,0,0)))
delta <- 0; # 0 , 0.1 , 0.2 , 0.3.
A.1 <- alpha %*% t(beta) # Alpha matrix
A.2 <- diag(x = 1, k) # 4x4 identity matrix
Bmat <- matrix(c(gamma, delta, 0, 0, delta, gamma, 0, 0, 0, 0, gamma, 0, 0, 0, 0, gamma), k) # Gamma matrix
A <- A.1 + A.2 + Bmat
## Create DeltaXt
series <- matrix(0, k, t + 2*p) # Raw series with zeros
Delta.Xt <- matrix(0, k, t + 2*p)
Xt.min1 <- matrix(0, k, t + 2*p)
Delta.Xt.min1 <- matrix(0, k, t + 2*p)
Delta.Xt.min2 <- matrix(0, k, t + 2*p+1)
Delta.Xt.min3 <- matrix(0, k, t + 2*p+2)
for (i in (p + 1):(t + 2*p)){ # Generate series with e ~ N(0,1)
series[, i] <- A%*%series[, i-1] - Bmat%*%series[, i-2] + rnorm(k, 0, 1)
Delta.Xt[,i] <- series[,i] - series[,i-1]
Xt.min1[,i] <- series[,i-1]
Delta.Xt.min1[,i] <- series[,i-1] - series[,i-2]
Delta.Xt.min2[,i+1] <- series[,i-1] - series[,i-2]
Delta.Xt.min3[,i+2] <- series[,i-1] - series[,i-2]
}
Delta.Xt.min2 <- Delta.Xt.min2[,1:54]
Delta.Xt.min3 <- Delta.Xt.min3[,1:54]
Delta.Xt <- t(Delta.Xt)
Xt.min1 <- t(Xt.min1)
Delta.Xt.min1 <- t(Delta.Xt.min1)
Delta.Xt.min2 <- t(Delta.Xt.min2)
Delta.Xt.min3 <- t(Delta.Xt.min3)
ols.lm1 <- lm(Delta.Xt~Xt.min1 + Delta.Xt.min1)
u <- ols.lm1$residuals
ols.lm2 <- lm(Xt.min1~Delta.Xt.min1+Delta.Xt.min2+Delta.Xt.min3)
v <- ols.lm2$residuals
for(i in  1:length(u[,1])){
sigma.uu <- 1/length(u[,1]) * u[i,]%*%t(u[i,])
sigma.vv <- 1/length(v[,1]) * v[i,]%*%t(v[i,])
sigma.uv <- 1/length(v[,1]) * u[i,]%*%t(v[i,])
sigma.vu <- 1/length(v[,1]) * v[i,]%*%t(u[i,])
}
Sigma <- inv(sigma.vv)%*%sigma.vu%*%inv(sigma.uu)%*%sigma.uv
Sigma <- solve(sigma.vv)%*%sigma.vu%*%solve(sigma.uu)%*%sigma.uv
View(sigma.uu)
Sigma <- solve(sigma.vv)%*%sigma.vu%*%solve(sigma.uu)%*%sigma.uv
for(i in  1:length(u[,1])){
sigma.uu <- 1/length(u[,1]) * u[i,]%*%t(u[i,])
sigma.vv <- 1/length(u[,1]) * v[i,]%*%t(v[i,])
sigma.uv <- 1/length(u[,1]) * u[i,]%*%t(v[i,])
sigma.vu <- 1/length(u[,1]) * v[i,]%*%t(u[i,])
}
Sigma <- solve(sigma.vv)%*%sigma.vu%*%solve(sigma.uu)%*%sigma.uv
u[i,]%*%t(u[i,])
u[1,]%*%t(u[1,])
1/length(u[,1])
View(sigma.uu)
View(u)
length(u[,1]
)
View(sigma.uu)
u[i,]
sigma.uu
sigma.vv
solve(sigma.vv)
for(i in  1:length(u[,1])){
sigma.uu <- 1/length(u[,1]) * u[i,]%*%t(u[i,])
sigma.vv <- 1/length(u[,1]) * v[i,]%*%t(v[i,])
sigma.uv <- 1/length(u[,1]) * u[i,]%*%t(v[i,])
sigma.vu <- 1/length(u[,1]) * v[i,]%*%t(u[i,])
}
View(u)
View(sigma.uu)
View(sigma.vu)
for (i in (p + 1):(t + 2*p)){ # Generate series with e ~ N(0,1)
series[, i] <- A%*%series[, i-1] - Bmat%*%series[, i-2] + rnorm(k, 0, 1)
Delta.Xt[,i] <- series[,i] - series[,i-1]
Xt.min1[,i] <- series[,i-1]
Delta.Xt.min1[,i] <- series[,i-1] - series[,i-2]
Delta.Xt.min2[,i+1] <- series[,i] - series[,i-1]
Delta.Xt.min3[,i+2] <- series[,i+1] - series[,i]
}
View(u)
